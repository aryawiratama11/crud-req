{
  "_args": [
    [
      {
        "raw": "react-validation",
        "scope": null,
        "escapedName": "react-validation",
        "name": "react-validation",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/quroll/Projects/skripsi/react-pengadaan"
    ]
  ],
  "_from": "react-validation@latest",
  "_id": "react-validation@2.10.9",
  "_inCache": true,
  "_location": "/react-validation",
  "_nodeVersion": "6.3.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/react-validation-2.10.9.tgz_1478088624970_0.9614729599561542"
  },
  "_npmUser": {
    "name": "lesha-spr",
    "email": "voodoo.spr@gmail.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-validation",
    "scope": null,
    "escapedName": "react-validation",
    "name": "react-validation",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/react-validation/-/react-validation-2.10.9.tgz",
  "_shasum": "f56e32cabcf22d53d82af34a7bed80f2b22ba7c4",
  "_shrinkwrap": null,
  "_spec": "react-validation",
  "_where": "/Users/quroll/Projects/skripsi/react-pengadaan",
  "author": {
    "name": "Oleksii An"
  },
  "bugs": {
    "url": "https://github.com/Lesha-spr/react-validation/issues"
  },
  "dependencies": {},
  "description": "validation components",
  "devDependencies": {
    "babel-core": "^6.17.0",
    "babel-eslint": "^7.0.0",
    "babel-jest": "^16.0.0",
    "babel-loader": "^6.2.5",
    "babel-plugin-transform-decorators": "^6.13.0",
    "babel-plugin-transform-es2015-computed-properties": "^6.8.0",
    "babel-plugin-transform-object-assign": "^6.8.0",
    "babel-plugin-transform-runtime": "^6.15.0",
    "babel-preset-es2015": "^6.16.0",
    "babel-preset-react": "^6.16.0",
    "babel-preset-stage-0": "^6.16.0",
    "browser-sync": "^2.17.1",
    "connect-history-api-fallback": "^1.3.0",
    "coveralls": "^2.11.14",
    "enzyme": "^2.5.0",
    "eslint": "^3.7.1",
    "eslint-config-airbnb": "^12.0.0",
    "eslint-loader": "^1.5.0",
    "eslint-plugin-import": "^1.16.0",
    "eslint-plugin-jsx-a11y": "^2.2.3",
    "eslint-plugin-react": "^6.3.0",
    "extract-text-webpack-plugin": "^1.0.1",
    "jest-cli": "^16.0.1",
    "react": "^15.3.2",
    "react-addons-test-utils": "^15.3.2",
    "react-dom": "^15.3.2",
    "react-hot-loader": "^1.3.0",
    "validator": "^6.1.0",
    "webpack": "^1.13.2",
    "webpack-dev-middleware": "^1.8.4",
    "webpack-hot-middleware": "^2.12.2"
  },
  "directories": {},
  "dist": {
    "shasum": "f56e32cabcf22d53d82af34a7bed80f2b22ba7c4",
    "tarball": "https://registry.npmjs.org/react-validation/-/react-validation-2.10.9.tgz"
  },
  "gitHead": "39365e2c55906876fe60a75814356e475e5636a5",
  "homepage": "https://github.com/Lesha-spr/react-validation",
  "jest": {
    "collectCoverage": true,
    "coverageThreshold": {
      "global": {
        "branches": 90,
        "functions": 90,
        "lines": 90,
        "statements": 90
      }
    },
    "testPathDirs": [
      "<rootDir>/lib/src/"
    ],
    "moduleNameMapper": {
      "^.+\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "<rootDir>/__mocks__/fileMock.js",
      "^.+\\.(css|scss|less)$": "<rootDir>/__mocks__/styleMock.js"
    }
  },
  "keywords": [
    "react",
    "validation",
    "react component",
    "react validation"
  ],
  "license": "ISC",
  "main": "lib/build/validation.js",
  "maintainers": [
    {
      "name": "lesha-spr",
      "email": "voodoo.spr@gmail.com"
    }
  ],
  "name": "react-validation",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "*",
    "classnames": "*"
  },
  "readme": "# react-validation\r\n\r\n[![npm version](https://badge.fury.io/js/react-validation.svg)](https://badge.fury.io/js/react-validation) [![Build Status](https://travis-ci.org/Lesha-spr/react-validation.svg?branch=master)](https://travis-ci.org/Lesha-spr/react-validation) [![Coverage Status](https://coveralls.io/repos/github/Lesha-spr/react-validation/badge.svg?branch=master)](https://coveralls.io/github/Lesha-spr/react-validation?branch=master) [![dependencies](https://david-dm.org/Lesha-spr/react-validation.svg)](https://david-dm.org/Lesha-spr/react-validation) [![devDependencies](https://david-dm.org/Lesha-spr/react-validation/dev-status.svg)](https://david-dm.org/Lesha-spr/react-validation/?type=dev)\r\n\r\nComponent to provide simple form validation for React components. It uses the [Controlled Components](https://facebook.github.io/react/docs/forms.html#controlled-components) approach for validation.\r\n\r\nIt is not easy to validate forms with React. The reason is a one-way data flow style. In this case we can't affect forms from the inputs in an easy way.\r\nReact-validation provides several components which are 'connected' to the form via the input's method attached by the Form component.\r\n\r\n### [DEMO](http://lesha-spr.github.io/react-validation/)\r\n### [DEMO src](https://github.com/Lesha-spr/react-validation/tree/master/lib/src/gh-pages)\r\n\r\nIt is just a validation and doesn't provide any model or something similar. You can use FormData or something like [form-serialize](https://www.npmjs.com/package/form-serialize) to get form data.\r\n\r\n##### NOTE: Always pass the ```name``` and ```validations``` props. They are required.\r\n\r\nAdditional markup is allowed inside the Validation.Form markup.\r\n\r\nAny additional props (such as event handlers) can also be passed to components.\r\n\r\nIf you find any bug or error, please feel free to raise an issue. Pull requests are also welcome.\r\n\r\n## Installation\r\n\r\n``\r\nnpm install react-validation\r\n``\r\n\r\n## Test\r\n\r\n``\r\nnpm run test:dev\r\n``\r\n\r\n## Example usage\r\n\r\nWith @2.*, react-validation is no longer dependent on the external ```validator```. You may use whatever validation strategy you want by extending the ```rules``` object.\r\nLet's take a look at its initial state:\r\n\r\n```javascript\r\nexport default = {};\r\n```\r\n\r\nThat's it, just an empty object literal. We don't have any validation rules OOTB because of an extremely high number of possibilities, but it's still recommended to use a well-tested library for known reasons.\r\n\r\nSo first of all let's extend it and add some rules:\r\n\r\n```javascript\r\nimport React from 'react';\r\n// NOTE: Deprecated\r\nimport Validation from 'react-validation';\r\n// From v2.10.0\r\n// import { rules, Form, Input, Select, Textarea, Button } from 'react-validation/lib/build/validation.rc'\r\nimport validator from 'validator';\r\n\r\n// Use Object.assign or any similar API to merge a rules\r\n// NOTE: IE10 doesn't have Object.assign API natively. Use polyfill/babel plugin.\r\nObject.assign(Validation.rules, {\r\n    // Key name maps the rule\r\n    required: {\r\n        // Function to validate value\r\n        // NOTE: value might be a number -> force to string\r\n        rule: value => {\r\n            return value.toString().trim();\r\n        },\r\n        // Function to return hint\r\n        // You may use current value to inject it in some way to the hint\r\n        hint: value => {\r\n            return <span className='form-error is-visible'>Required</span>\r\n        }\r\n    },\r\n    email: {\r\n        // Example usage with external 'validator'\r\n        rule: value => {\r\n            return validator.isEmail(value);\r\n        },\r\n        hint: value => {\r\n            return <span className='form-error is-visible'>{value} isnt an Email.</span>\r\n        }\r\n    },\r\n    // This example shows a way to handle common task - compare two fields for equality\r\n    password: {\r\n        // rule function can accept argument:\r\n        // components - components registered to Form mapped by name\r\n        rule: (value, components) => {\r\n            const password = components.password.state;\r\n            const passwordConfirm = components.passwordConfirm.state;\r\n            const isBothUsed = password\r\n                && passwordConfirm\r\n                && password.isUsed\r\n                && passwordConfirm.isUsed;\r\n            const isBothChanged = isBothUsed && password.isChanged && passwordConfirm.isChanged;\r\n\r\n            if (!isBothUsed || !isBothChanged) {\r\n                return true;\r\n            }\r\n\r\n            return password.value === passwordConfirm.value;\r\n        },\r\n        hint: () => <span className=\"form-error is-visible\">Passwords should be equal.</span>\r\n    },\r\n    // Define API rule to show hint after API error response\r\n    api: {\r\n        // We don't need the rule here because we will call the 'showError' method by hand on API error\r\n        hint: value => (\r\n            <button\r\n                className=\"form-error is-visible\"\r\n            >\r\n                API Error on \"{value}\" value. Focus to hide.\r\n            </button>\r\n        )\r\n    }\r\n});\r\n```\r\n\r\nNow we've added ```required``` and ```email``` to our rules with provided hints. This might be separated in a file where all the rules are registered.\r\n\r\nThat's it. We can now use it in our React components:\r\n\r\n```javascript\r\nimport Validation from 'react-validation';\r\nimport React, {Component, PropTypes} from 'react';\r\n\r\nexport default class Registration extends Component {\r\n    render() {\r\n        return <Validation.components.Form>\r\n            <h3>Registration</h3>\r\n            <div>\r\n                <label>\r\n                    Email*\r\n                    <Validation.components.Input value='email@email.com' name='email' validations={['required', 'email']}/>\r\n                </label>\r\n            </div>\r\n            <div>\r\n                <label>\r\n                    Password*\r\n                    <Validation.components.Input type='password' value='' name='password' validations={['required']}/>\r\n                </label>\r\n            </div>\r\n            <div>\r\n                <Validation.components.Button>Submit</Validation.components.Button>\r\n            </div>\r\n        </Validation.components.Form>;\r\n    }\r\n}\r\n```\r\n\r\nNote the ```validations``` prop. It's an array of strings that maps to the rules keys we've extended.\r\n\r\n## Components and props\r\n\r\n```react-validation``` provides a ```components``` object that contains ```Form```, ```Input```, ```Select```, ```Textarea``` and ```Button``` components.\r\nAll of them are just custom wrappers around the native components. They can accept any valid attributes and a few extra:\r\n\r\n1. ```containerClassName``` - ```Input```, ```Select``` and ```Textarea```: `react-validation` wraps the native components with an extra block. This prop adds a ```className``` to the wrapper.\r\n2. ```errorContainerClassName```: wrapper's error modifier className.\r\n3. ```validations``` - ```Input```, ```Select``` and ```Textarea```: accepts an array of validations strings that refers to the rules object's keys.\r\n4. ```errorClassName``` - ```Input```, ```Select```, ```Button``` and ```Textarea```: adds the passed value to ```className``` on error occurrences.\r\n\r\n##### NOTE: Always provide a ```name``` prop to ```Input```, ```Select``` and ```Textarea```. Always pass the ```validations``` prop to ```Input```, ```Select``` and ```Textarea```.\r\n\r\n### Form component\r\n\r\n```\r\nValidation.components.Form\r\n```\r\n\r\nThe most important component, which provides the heart of react-validation. It basically mixes the binding between the form itself and child react-validation components via ```context```.\r\nAny valid props can easily be passed to ```Form```, such ```onSubmit``` and ```method```.\r\n\r\n```Form``` provides four public methods:\r\n\r\n1. ```validate(name)``` - validates input with the passed name. The difference between this method and default validation is that ```validate``` marks the input as ```isUsed``` and ```isChanged```. ```name``` - name of the corresponding component.\r\n\r\n2. ```showError(name [,hint])``` - helps to handle async API errors. ```hint``` - optional hint to show. Can be string (error key, ex 'required') or function which returns hint (jsx).\r\n\r\n3. ```hideError(name)``` - hides a corresponding component's error.\r\n\r\n4. ```validateAll()``` - validates all react-validation components. Returns a map (key: field name prop, value: `<Array>` non passed validation rules) of invalid fields.\r\n\r\n\r\n```javascript\r\nexport default class Comment extends Component {\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        // Emulate async API call\r\n        setTimeout(() => {\r\n            // NOTE: 'api' should be defined on 'extend' step\r\n            this.form.showError('username', 'api');\r\n        }, 1000);\r\n    };\r\n\r\n    removeApiError = () => {\r\n        this.form.hideError('username');\r\n    };\r\n\r\n    render() {\r\n        return <Validation.components.Form ref={c => { this.form = c }} onSubmit={this.handleSubmit.bind(this)}>\r\n            <div className=\"row\">\r\n                <div className=\"small-12 columns\">\r\n                    <h3>Leave a comment</h3>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"small-12 medium-4 columns\">\r\n                    <label>\r\n                        <Validation.components.Input\r\n                          onFocus={this.removeApiError}\r\n                          placeholder=\"username\"\r\n                          type=\"text\"\r\n                          errorClassName=\"is-invalid-input\"\r\n                          containerClassName=\"\"\r\n                          value=\"Username\"\r\n                          name=\"username\"\r\n                          validations={['required', 'alpha']}\r\n                        />\r\n                    </label>\r\n                </div>\r\n                <div className=\"small-12 medium-8 columns\">\r\n                    <label>\r\n                        <Validation.components.Textarea\r\n                          placeholder=\"Leave your comment...\"\r\n                          errorClassName=\"is-invalid-input\"\r\n                          containerClassName=\"\"\r\n                          value=\"Comment\"\r\n                          name=\"comment\"\r\n                          validations={['required']}\r\n                        />\r\n                    </label>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"small-12 medium-6 columns\">\r\n                    <Validation.components.Button className=\"button\">Submit</Validation.components.Button>\r\n                </div>\r\n            </div>\r\n        </Validation.components.Form>\r\n    }\r\n}\r\n```\r\n\r\n### Input component\r\n\r\n```\r\nValidation.components.Input\r\n```\r\n\r\nA wrapper around the native ```input```. It accepts a ```validations``` prop - an array of strings that refers to rules object keys.\r\n\r\n```javascript\r\n<Validation.components.Input name='firstname' validations={['alpha', 'lt8']}/>\r\n```\r\n\r\n##### NOTE: For types ```radio``` and ```checkbox```, react-validation will drop the ```value``` to an empty string when it's not checked. This is to avoid validation of non-checked inputs.\r\n\r\n`react-validation` will break with the first listed rule, if more than one rule is broken. In the example above (lt8 - value length less than 8), for ```really long value with d1g1t``` input value, the ```alpha``` rule will break validation first. We can control it by ordering rules within the ```validations``` array.\r\n\r\n### Textarea component\r\n\r\n```\r\nValidation.components.Teaxtarea\r\n```\r\n\r\nA wrapper around the native ```textarea```. Like ```Input```, it accepts a ```validations``` prop. Nothing special here:\r\n\r\n```javascript\r\n<Validation.components.Textarea name='comment' value='' validations={['required']}/>\r\n```\r\n\r\n### Select component\r\n\r\n```\r\nValidation.components.Select\r\n```\r\n\r\nA wrapper around the native ```select```. Like ```Input```, it accepts a ```validations``` prop. Nothing special here:\r\n\r\n```javascript\r\n<Validation.components.Select name='city' value='' validations={['required']}>\r\n    <option value=''>Choose your city</option>\r\n    <option value='1'>London</option>\r\n    <option value='2'>Kyiv</option>\r\n    <option value='3'>New York</option>\r\n</Validation.components.Select>\r\n```\r\n\r\n### Button component\r\n\r\n```\r\nValidation.components.Button\r\n```\r\n\r\nA wrapper around the native ```button```. React-validation disables (adds ```disabled``` prop) the button on error occurrences. This behavior could be suppressed by passing the ```disabled``` prop directly to a component.\r\n\r\n## Migration from 1.*\r\n\r\n#### extendErrors API\r\n```extendErrors``` no longer exists. Replace it with the new approach of validation rules registration. ```hint``` appearance is now fully controlled:\r\n\r\n```javascript\r\nObject.assign(Validation.rules, {\r\n    required: {\r\n        rule: value => {\r\n            return value.trim();\r\n        },\r\n        hint: value => {\r\n            return <span className='form-error is-visible'>Required</span>\r\n        }\r\n    }\r\n});\r\n```\r\n\r\n#### Defaults\r\nReact-validation no longer has any defaults. This is TBD but for a 2.0.0 please provide ```errorClassName``` and ```containerClassName``` directly to the validation components.\r\n\r\n#### Validations\r\n```validations``` prop now accepts an array of strings instead of objects. It's made to be more simple and reduce ```render``` code.\r\n\r\nComponents API moved to Form API. ```forceValidate``` method no longer exist.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Lesha-spr/react-validation.git"
  },
  "scripts": {
    "build": "webpack --config ./webpack/webpack.config.build && webpack --config ./webpack/webpack.config.minify",
    "dev": "node dev-server",
    "gh-pages": "webpack --config ./webpack/webpack.config.gh-pages",
    "test": "node --harmony_proxies node_modules/.bin/jest --coverage && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
    "test:dev": "jest"
  },
  "version": "2.10.9"
}
